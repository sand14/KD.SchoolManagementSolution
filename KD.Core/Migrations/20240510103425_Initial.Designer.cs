// <auto-generated />
using System;
using KD.Core.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KD.Core.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20240510103425_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KD.Core.DomainModels.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("(md5(((random())::text || (clock_timestamp())::text)))::uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool?>("Optional")
                        .HasColumnType("boolean");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("integer");

                    b.HasKey("CourseId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("(md5(((random())::text || (clock_timestamp())::text)))::uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EvaluationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GradeValue")
                        .HasColumnType("double precision");

                    b.Property<string>("Observations")
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("GradeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecializationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("(md5(((random())::text || (clock_timestamp())::text)))::uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("IdentificationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdentificationNumber"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("(md5(((random())::text || (clock_timestamp())::text)))::uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("integer");

                    b.HasKey("TeacherId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse", (string)null);
                });

            modelBuilder.Entity("KD.Core.DomainModels.Course", b =>
                {
                    b.HasOne("KD.Core.DomainModels.Specialization", "Specialization")
                        .WithMany("Courses")
                        .HasForeignKey("SpecializationId")
                        .HasConstraintName("FK_Courses_Specializations");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Grade", b =>
                {
                    b.HasOne("KD.Core.DomainModels.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Grades_Courses");

                    b.HasOne("KD.Core.DomainModels.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Grades_Students");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Teacher", b =>
                {
                    b.HasOne("KD.Core.DomainModels.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Teachers_Courses");

                    b.HasOne("KD.Core.DomainModels.Specialization", "Specialization")
                        .WithMany("Teachers")
                        .HasForeignKey("SpecializationId")
                        .HasConstraintName("FK_Teachers_Specializations");

                    b.Navigation("Course");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("StudentCourse", b =>
                {
                    b.HasOne("KD.Core.DomainModels.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentCourse_Courses");

                    b.HasOne("KD.Core.DomainModels.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentCourse_Students");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Course", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Specialization", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("KD.Core.DomainModels.Student", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
